(*) 通过map将多个操作依次应用在某个数据上

背景知识：
=====

Scala中有一个Option类型可以表示某个数据存在还是不存在。比如从数据库里查找userId为123的User，可能有也可能没有，通常我们会这样定义：

def findUser(id:String):Option[User] = { }

如果找到了，则返回值为Some(user)，否则为None。

我们可以调用Option[T]类型中的map方法，对它里面的数据进行操作（如果有的话）。比如，我们要从数据库中找到id为123的User并拿到其name，可以这样写：

val name:Option[String] = findUser("123").map(_.name)

我们还可以多次调用map，形成链式操作，如：

findUser("123").map(_.name).map( name => name.toLowerCase())

具体用法参看scala书籍中对Option/Some/None/map的解释。

题目：
======

假设我们已经定义了以下方法（需要拷贝到你的答案中）：

def double(number:Int) = 2*number
def add10(number:Int) = 10 + number
def negative(number:Int) = -1 * number

我们可以对一个Option[T]类型的数据多次调用map，来对其拥有的数据进行操作，如：

def myconvert(n:Int) = Some(n).map(double).map(add10).map(negative).get

尝试一下：

myconvert(5)

将输出-20

请合理组装它们实现新的函数，对输入的数字进行转换。

输入的数字将根据“对3求模”的余数，分成三类，每一类的转换规则是一样的。

比如 

1 % 3 == 4 % 3 == 1
2 % 3 == 5 % 3 == 2
3 % 3 == 6 % 3 == 0

所有的整数将会被分为三类。每一类中的数字的转换方式是一样的。

以下为示例：

输入:
1
2
3
4
5
6

输出：
-22
-24
4
-28
-30
-2

请猜测规则，并可对更多的数字进行转换
