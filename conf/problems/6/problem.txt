(**) 掌握trait的叠加特性

考查的知识点：
1. 如果多个trait继承自同一个trait，则可以改变或增强同名方法的功能
2. 混入时的顺序很重要

假设我们已经定义了如下trait（需要将它们拷贝到你的答案中）:

trait Converter {
  def convert(number:Int):Int = number
}

trait DoubleConverter extends Converter {
  override def convert(number:Int) = super.convert(2*number)
}

trait Add10Converter extends Converter {
  override def convert(number:Int) = super.convert(10 + number)
}

trait NegativeConverter extends Converter {
  override def convert(number:Int) = super.convert(-1 * number)
}

请合理使用它们对输入的数字进行转换。

输入的数字将根据“对3求模”的余数，分成三类，每一类的转换规则是一样的。

比如 

1 % 3 == 4 % 3 == 1
2 % 3 == 5 % 3 == 2
3 % 3 == 6 % 3 == 0

所有的整数将会被分为三类。每一类中的数字的转换方式是一样的。

数据示例：

输入:
1
2
3
4
5
6

输出：
-22
-24
4
-28
-30
-2

请猜测规则，实现以下函数：

def myConvert(n:Int):Int

